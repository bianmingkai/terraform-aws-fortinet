name: "Shared Security Hub INTEGRATION"
run-name: "${{inputs.terraform_command}} - ${{inputs.environment}}"

on:
  workflow_dispatch: 
    inputs:
      terraform_command:
        description: "Terraform command:" 
        type: choice 
        required: true
        default: "plan"
        options:
          - plan 
          - apply
          - destroy
      environment:
        description: "Select the environment:"
        type: choice
        required: true
        default: "bmwgroup-0-euwe1"
        options:
          - bmwgroup-0-euwe1
          #- bmwgroup-0-eucel
          - bmwgroup-0-apse1
          - bmwgroup-0-useal
          #- bmwgroup-0-uswe2
          #- bmwgroup-0-apne1
          #- bmwgroup-0-apse2
          #- bmwgroup-1-euwel
          #- bmwgroup-1-eucel
          #- bmwgroup-1-apse1
          #- bmwgroup-1-useal
          #- bmwgroup-1-uswe2
          #- bmwgroup-1-apne1
          #- bmwgroup-1-apse2
      safeguard:
        description: "confirm apply/destroy:"
        type: boolean
        default: false
env:
  REPO: "shawnbian1/terraform-aws-fortinet"
  REPO_PATH: "terraform-aws-fortinet"
  WORKING_DIRECTORY: "shared_security_hub"
  #AWS_ROLE: "arn:aws:iam::43:role/aws-gh-oidc"
  TF_LOG: "INFO"
  TF_TFSTATE_FILE: "shared-firewall-${{inputs.environment}}.tfstate"
permissions:
  id-token: write # This is required for aws oidc connection 
  contents: read # This is required for actions/checkout
jobs:
  deploy:
    runs-on: ['ubuntu-latest']
    environment: NTWK_INT
    #environment: NTMK_PROD
    defaults: 
      run:
        shell: bash
        working-directory: ./${{env.WORKING_DIRECTORY}} 
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Set Environment Regions
        id: set-env-region 
        run: |
              declare -A DICT_REGION=(
                ["bmwgroup-0-euwel"]="eu-west-1"
                ["bmwgroup-1-euwe1"]="eu-west-1"
                ["bmwgroup-0-euce1"]="eu-central-1"
                ["bmwgroup-1-eucel"]-"eu-central-1"
                ["bmwgroup-B-usea1"]="us-east-1"
                ["bmwgroup-1-usea1"]="us-east-1"
                ["bmwgroup-0-uswe2"]="us-west-2"
                ["bMWgroup-1-Ãºswe2"]="us-west-2"
                ["bmwgroup-0-apne1"]="ap-northeast-1"
                ["bmwgroup-1-apne1"]="ap-northeast-1"
                ["bmwgroup-1-apse1"]="ap-sourtheast-1"
                ["bmwgroup-1-apse1"]="ap-sourtheast-1"
                ["bmwgroup-1-apse2"]="ap-sourtheast-2"
                ["bmwgroup-1-apse2"]="ap-sourtheast-2"
                )
              export REGION=${DICT_REGION["${{inputs.environment}}"]}
              echo "REGION=${REGION}" >> $GITHUB_ENV 
              printenv REGION 
              printenv
      - name: Show Working Directory 
        id: ls 
        run: |
          cd .. 
          ls
      - name: Copy Env File 
        id: cp-var-file 
        run: |
          cd ..
          cp -p -r shared-firewalls/${{inputs.environment}}${{env.WORKING_DIRECTORY}}/ 
          cd ${{env.WORKING_DIRECTORY}}/
          echo 'ls ${{env.WORKING_DIRECTORY}}/' 
          ls
          echo 'cat ${{inputs.environment}}/${{inputs.environment}}.tfvars' 
          cat ${{inputs.environment}}/${{inputs.environment}}.tfvars

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3 
        with:
          role-to-assume: ${{env.AWS_ROLE}} 
          aws-region: ${{env.REGION}}
      - name: Print assumed role
        run: aws sts get-caller-identity
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 
        with:
          terraform_version: 1.7.1
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: terraform init 
        id: init
        run: terraform init -backend-config="key=${{env.TF_TFSTATE_FILE}}"

      - name: terraform fmt
        id: fmt
        run: |
          terraform fmt
          terraform fmt -check
        continue-on-error: true

      - name: terraform validate
        id: validate
        run: terraform validate # -no-color
      
      - name: terraform plan
        id: plan
        run: |
          terraform plan \
            -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars \
            -input=false
        continue-on-error: true

            
      - name: Terraform Plan Status 
        run: |
         if [ "${{steps.plan.outcome}}" == "failure" ]; then 
          echo >> "$GITHUB_OUTPUT" 
          echo "printenv" 
          echo "exit 1" 
         else
               echo "success" 
         fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && inputs.terraform_command == 'apply' && inputs.safeguard 
        run: |
          terraform apply \
            -auto-approve \ 
            -input-false \
            -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars

      - name: Terraform Destroy
        if: github.ref == 'refs/heads/main' && inputs.terraform_command == 'destroy' && inputs.safeguard 
        run: |
          terraform destroy \
          -auto-approve \ 
          -input=false \
          -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars
