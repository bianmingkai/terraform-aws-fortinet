name: "shared security Hub"
on:
   workflow_dispatch:
     inputs:
       terraform command:
         description: "Terraform command:" 
         type: choice 
         required: true
         default: "plan" 
         options: 
         - plan 
         - apply 
         - destroy
       environment:
         description: "Select the environment:" 
         type: choice 
         required: true
         default: "bmwgroup-o-euwel" 
         options:
           - bmwgroup-o-euwel 
           - bmwgroup-l-euwe1 
           - bmwgroup-0-euce1 
           - bmwgroup-1-euce1 
           - bmwgroup-0-useal 
           - bmwgroup-1-useal 
           - bmwgroup-o-uswe2 
           - bmwgroup-1-uswe2 
           - bmwgroup-0-apne1
           - bmwgroup-1-apne1 
           - bmwgroup-0-apse1 
           - bmwgroup-1-apse1 
           - bmwgroup-0-apse2  
           - bmwgroup-1-apse2
       safeguard:
         description: "Confirm apply/destroy:"
         type: boolean
         default: false

env:
  REPO: "NWDEF/aws-fortinet-hub" 
  REPO_PATH: "aws-fortinet-hub"
  WORKING_DIRECTORY: "shared_security hub"
  AWS_ROLE: "arn:aws:iam::437073547235:role/aws-gh-oidc" 
  TF_LOG: "INFO"
  TF_TFSTATE_FILE: "shared-firewall-${{inputs.environment}}.tfstate"
permissions:
    id-token: write # This is required for aws oidc connection
    contents: read # This is required for actions/checkout 
jobs:
  deploy:
    runs-on: [ 'Linux' ]
    environment: NTWK_INT 
    defaults:
      run:
        shell: bash
        working-directory: ./${{env.WORKING_DIRECTORY}} 
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Set Environment Regions 
        id: set-env-region 
        run: |
          declare -A DICT_REGION=(
            ["bmwgroup-0-euwel"]="eu-west-1"
            ["bmwgroup-1-euwel"]="eu-west-1"
            ["bmwgroup-0-euce1"]="eu-central-1"
            ["bmwgroup-1-euce1"]="eu-central-1"
            ["bmwgroup-0-usea1"]="us-east-1"
            ["bmwgroup-1-usea1"]="us-east-1"
            ["bmwgroup-0-uswe2"]="us-west-2"
            ["bmwgroup-1-uswe2"]="us-west-2"
            ["bmwgroup-0-apne1"]="ap-northeast-1"
            ["bmwgroup-1-apne1"]="ap-northeast-1"
            ["bmwgroup-0-apse1"]="ap-southeast-1"
            ["bmwgroup-1-apse1"]="ap-southeast-1"
            ["bmwgroup-0-apse2"]="ap-southeast-2"
            ["bmwgroup-1-apse2"]="ap-southeast-2"
            )
          export REGION=${DICT_REGION["${{inputs.environment}}"]} 
          echo "REGION=${REGION}">> $GITHUB_ENV 
          printenv REGION 
          printenv
      - name: Show working Directory
        id: ls 
        run: | 
          cd .. 
          ls
      - name: Copy Env File
        id: cp-var-file 
        run: |
          cd ..
          cp -p -r shared-firewalls/${{inputs.environment}} ${{env.WORKING_DIRECTORY}}/
          cd ${{env.WORKING DIRECTORY}}/
          echo 'ls ${{env.WORKING_DIRECTORY}}/' 
          ls
          echo 'cat ${{inputs.environment}}/${{inputs.environment}}.tfvars' 
          cat ${{inputs.environment}}/${{inputs.environment}}.tfvars
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3 
        with:
          role-to-assume: ${{env.AWS_ROLE}} 
          aws-region: S{{env.REGION}}
      - name: Print assumed role
        run: aws sts get-caller-identity
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 
        with:
          terraform_version: 1.7.1
    
      - name: Setup Node  
        uses: actions/setup-node@v4 
        with:
          node-version:'20'
      - name: Terraform Init 
        id: init
        run: terraform init -backend-config="key=${{env.TF_TFSTATE_FILE}}"
      - name: Terraform fmt
        id: fmt 
        run: |
          terraform fmt
          terraform fmt -check 
        continue-on-error: true
      - name: Terraform Validate
        id: validate
        run: terraform validate #-no-color
      - name: Terraform Plan
        id: plan 
        run: |
          terraform plan \
            -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars 
        continue-on-error: true
      - name: Terraform Plan Status
        run: |
          if [ "${{steps.plan.outcome}}" == "failure" ]; then 
            echo >> "SGITHUB_OUTPUT" 
            echo "printenv" 
            echo "exit 1" 
          else
            echo "success" 
          fi
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' &&  inputs.terraform_command == 'apply' && inputs.safeguard 
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars 
      - name: Terraform Destroy
        if: github.ref == 'refs/heads/main' &&  inputs.terraform_command == 'destroy' && inputs.safeguard
        run: |
          terraform destroy \
            -auto-approve \
            -input=false \
            -var-file ${{inputs.environment}}/${{inputs.environment}}.tfvars
